README
Описание проекта
Сервис управления рассылками – это веб-приложение, позволяющее пользователям создавать, редактировать и управлять рассылками для клиентов. Сервис поддерживает:

Управление рассылками (CRUD).
Управление клиентами (CRUD).
Управление сообщениями для рассылок (CRUD).
Автоматическую отправку рассылок по расписанию.
Администрирование рассылок (для менеджеров).
Блог для продвижения сервиса.
Кэширование данных для повышения производительности.
Аутентификацию и регистрацию пользователей с подтверждением по email.
Структура проекта
├── config/                 # Основные настройки проекта
│   ├── settings.py         # Основной файл настроек
│   ├── urls.py             # Настройка маршрутов
│   └── wsgi.py             # WSGI-сервер
├── mailing/                # Приложение для рассылок
│   ├── models.py           # Модели данных для рассылок, сообщений и клиентов
│   ├── views.py            # Контроллеры для работы с рассылками
│   ├── urls.py             # Маршруты приложения
│   ├── forms.py            # Формы для работы с сущностями
│   └── templates/          # Шаблоны для интерфейса
├── users/                  # Приложение для управления пользователями
│   ├── models.py           # Кастомная модель пользователя
│   ├── views.py            # Контроллеры для работы с пользователями
│   ├── urls.py             # Маршруты приложения
│   └── templates/          # Шаблоны для интерфейса
├── blog/                   # Приложение для ведения блога
│   ├── models.py           # Модели для блога
│   ├── views.py            # Контроллеры для работы с блогом
│   ├── urls.py             # Маршруты приложения
│   └── templates/          # Шаблоны для блога
├── static/                 # Статические файлы
├── media/                  # Медиафайлы
└── .env.sample            # Пример файла конфигурации переменных окружения

Установка и настройка
Шаг 1: Клонирование репозитория
git clone https://github.com/DKI62/cw6
Шаг 2: Установка зависимостей
Убедитесь, что у вас установлен Poetry. Затем выполните:
poetry install
Шаг 3: Создание файла .env
Создайте файл .env в корне проекта на основе .env.sample:
cp .env.sample .env
Откройте .env и настройте переменные для своей среды.
Шаг 4: Применение миграций
Выполните миграции базы данных:
python manage.py migrate
Шаг 5: Создание суперпользователя
Создайте администратора для доступа в админ-панель:
python manage.py createsuperuser
Шаг 6: Запуск сервера разработки
Запустите сервер разработки:
python manage.py runserver
Приложение будет доступно по адресу: http://127.0.0.1:8000.

Использование
1. Управление рассылками
Перейдите в раздел "Список рассылок", чтобы создать, редактировать или удалить рассылку.
Автоматическая отправка сообщений производится с помощью планировщика.
2. Управление клиентами
Добавляйте и редактируйте клиентов через раздел "Список клиентов".
3. Управление сообщениями
Создавайте сообщения через раздел "Список сообщений".
4. Администрирование
Менеджеры могут:
Просматривать все рассылки.
Блокировать пользователей.
Отключать рассылки.
5. Блог
Просматривайте блог и управляйте статьями через админ-панель.
Особенности
Планировщик задач: Используется django-apscheduler для запуска автоматических рассылок.
Кэширование: Используется Redis для кэширования главной страницы и блога.
Переменные окружения: Все чувствительные данные вынесены в файл .env.

Дополнительные команды
Создание фикстур
Для загрузки данных выполните:
python manage.py loaddata <имя_фикстуры>

Команда для рассылки
Запустите скрипт рассылки вручную:
python manage.py send_newsletter
